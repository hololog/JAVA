import java.io.*;
import java.util.*;

public class Main {
	
	static int N, M; // 행, 열
	static int[][] map;
	static boolean[][] visited;
	
	static int[] dX = {1, -1, 0, 0};
	static int[] dY = {0, 0, 1, -1};
	
	static int sum = 0;
	
	public static void main(String[] args) throws Exception {
		/* 원전 문제
		 * 가로 N 세로 M 크기의 원전이있다.
		 * 각 숫자는 원전의 양이다
		 * 연결되어있는 원전은 (0이상의 숫자들) 한번의 시추로 모두 획득 가능하다.
		 * 총 몇번의 시추작업이 있어야하는지와 한번의 시추로 얻을수 있는 원전의양중 가장 큰값을 출력하는 프로그램을 작성하라
		 * 
		 * 첫번째 줄에는 테스트케이스 갯수(T)를 입력받는다.
		 * 두번째 줄에는 원전의 가로세로 N,M을 입력 받는다.
		 * 다음은 각각 원전의 양을 한칸씩 띄워 입력받는다.
		 * 
		 *  예)
		 *  -입력
		 *  2
		 *  2 3
		 *  1 0 0
		 *  2 0 9
		 *  4 6
		 *  0 0 0 0 0 1
		 *  0 2 0 0 8 2
		 *  1 3 0 2 0 0
		 *  0 2 3 1 0 9
		 *  
		 *  -출력
		 *  #1 2 9
		 *  #2 3 14
		 * */
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int T = Integer.parseInt(br.readLine());
		
		for(int t=1; t<=T; t++) {
			StringTokenizer st = new StringTokenizer(br.readLine());
			N = Integer.parseInt(st.nextToken());	// 행
			M = Integer.parseInt(st.nextToken());	// 열
			map = new int[N][M];
			visited = new boolean[N][M];
			ArrayList<Integer> result = new ArrayList<Integer>();
			
			// map 데이터 입력받기
			for(int i=0; i<N; i++) {
				st = new StringTokenizer(br.readLine());
				for(int j=0; j<M; j++) {
					map[i][j] = Integer.parseInt(st.nextToken());
				}
			}
			
			// 0이 아닌 구간을 찾기
			for(int i=0; i<N; i++) {
				for(int j=0; j<M; j++) {
					
					if(map[i][j] != 0 && !visited[i][j]) { // 0이 아니거나 방문한적이 없으면
						check(i, j);
						result.add(sum);
						sum = 0;
					}
					
				}
			}
			
			int max = Integer.MIN_VALUE;
			for(int i=0; i<result.size(); i++)	max = Math.max(max, result.get(i));
			
			System.out.println("#" + t + " " + result.size() + " " + max);
			
		}
		
	} // main() 메서드 끝
	
	public static void check(int x, int y) {
		
		visited[x][y] = true;
		
		for(int i = 0; i < 4; i++) {
			
			int cx = x + dX[i];
			int cy = y + dY[i];
			if(cx < 0 || cx >= N || cy < 0 || cy >= M) continue; // 배열범위 벗어날을 경우
			if(map[cx][cy] != 0 && !visited[cx][cy]) check(cx, cy);
		}
		
		sum += map[x][y];
		
	}
	
	
	
	
	

}
